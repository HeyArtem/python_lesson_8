# 1.Не могу разобраться с итератором множеств

set_iter = { x%3 for x in  range(0, 100) if x>=90 }
print(set_iter)

'''
Ответ: {0, 1, 2}


Если x=4, то ответ:
{0, 1, 2, 3}


Если x=5, то ответ:
{0, 1, 2, 3, 4}

Если x=10, то ответ:
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}
Т.е как бы получается, что цифра после % означает определенный потолок в множестве (напоминает range)

Тогда почему, если х=11, то:
{0, 2, 3, 4, 5, 6, 7, 8, 9, 10}
Куда исчезла 1?

Если х=12 то:
{0, 1, 2, 3, 6, 7, 8, 9, 10, 11}
Почему 1 вернулась?

Если х=13 то:
{0, 1, 2, 3, 4, 5, 6, 7, 8, 12}
Где 10, 9, 11?

И для чего выражение «..for x in  range(0, 100) if x>=90..»?

А если х=20 то:
{10, 11, 12, 13, 14, 15, 16, 17, 18, 19}
Почему исчезли числа от 0 до 9?

А если х=1000, то:
{96, 97, 98, 99, 90, 91, 92, 93, 94, 95}
???


И "%" в данном контексте не знак, который означает деление при котором мы смотрим на остаток?


Не могу разобраться с итерацией множества
'''


# 2. ЯВНЫЕ генераторы, простой пример. Я из урока взял
print('    ЯВНЫЕ генераторы, простой пример')

def generator_example_1(num): # num это количество генераторов которые мы хотим создать
    for i in range(num):
        yield (i**3)
gen = generator_example_1(10)

print('1 запрос: ', next(gen)) # next ключевое слово, для получения следующих элементов
print('2 запрос: ',next(gen))
print('3 запрос: ',next(gen))
print('4 запрос: ',next(gen))

'''
Ответ будет:
1 запрос:  0
2 запрос:  1
3 запрос:  8
4 запрос:  27
Как сделать,что бы вывелась вся последовательность?
Что в данном контексте означает next?

'''



# 3. Имею генератор и замеряю используемую оперативную память и время работы, но в ответе почему то 0,0 секунд??
import time
import os
import random
import psutil # измерение памяти в кэше

colors = ['White', 'Black', 'Green']
brands = ['Volvo', 'Lada', 'Audi']






def cars_gen(num):
    for i in range(num):
        car = {'Цвет':random.choice(colors),
               'Марка':random.choice(brands),
               'id':i}
        yield car # yield ключевое слово

proc_gen = psutil.Process(os.getpid()) # помереем используемую до выполнения память
print('Используемая память до вып.фун-ции: '+str(proc_gen.memory_info().rss/1000000)) # memory_info - это вычисление памяти., в атрибуте rss хранится текущее значение используемое количество памятив кэше

time_1_gen = time.time() # Засекаем время

cars_list_gen=cars_gen(1000000) # Создаем список из 1 млн. обьектов, принтовать не буду, ни к чему это все выводить


proc_gen =psutil.Process(os.getpid()) # измеряем память после выполнения
print('Используемая память полсе вып.фун-ции: '+str(proc_gen.memory_info().rss/1000000))

time_2_gen = time.time()
print("Время исполнения кода: {} секунд".format(time_2_gen-time_1_gen )) # сколько времени заняло выполнение функции

''''
У меня выводится ответ:
Используемая память до вып.фун-ции: 12.558336
Используемая память полсе вып.фун-ции: 12.570624
Время исполнения кода: 0.0 секунд

Почему 0,0 секунд? Была бы хоть одна сотая или тысячная..?

'''

# 4. Вопрос не по коду. Знакомый человек, говорит, что им теребутся сейчас тестировщики.Как вы считаете,
#     стоит ли мне уже сейчас уходить со своего осн. места работы (я официант) и попробоать устроиться
#     тестировщиком. Это как бы будет мой вход в it?


# 5. Когда писал домашнее задание, немног внес изменений от себя, но очень много потерял времени на поиск ошибки,
#    а именно --> return wrapper-поставил '( )' в конце, код ошибки не указывает на это.
#    Так же --> def ram_difference(n):-не указал 'n' в скобках.
#     Кроме этого --> def gen_numb(num): за место 'num' что то другое написал.
#     И при запуске --> ram_difference(1000000), тоже потерял скобки. Не совсем понимаю когда они нужны и когда что в них писать


print()